let $ = jQuery.noConflict(),
	devMode,
	scrollController,
	foregroundContent,
	pageTransition,
	body,
	mobileCheck = false,
	scrollBar,
	hud,
	resizeCallbacks = [],
	mobileResizeCallbacks = [],
	barbaCallbacks = [],
	feather,
	background;
window.currentY = 0;

$(function () {
	body = $('body');
	mcubeDebug();
	foregroundContent = $('.foreground-content');
	// Scroll magic controller + Smooth scrollbar liés
	mobileCheck = new MobileCheck();
	new ResizeEvents();
	new SmoothScroll();
	pageTransition = new PageTransition();

	// Composants Mobile & Desktop
	new AppearOnScroll();
	new AutoType();
	new Buttons();
	new Collaborators();
	new Contact();
	new DataLink();
	new HeaderVideo();
	new HomeProjects();
	hud = new HUD();
	new ImageParallax();
	new IntroParallax();
	new MadeByMcube();
	new ProjectPage();
	new ProjectsPage();
	new Start3dOnScroll();
	new StickyCursor();
	new TextAppear();
});

function scrollListener(currentY) {
	hud.onScroll(currentY);
	if (window.feather) {
		window.feather.onScroll(currentY);
	}
}

function AppearOnScroll() {
	this.scenes = [];
	this.build();
	barbaCallbacks.push(this);
	resizeCallbacks.push(this);
}

AppearOnScroll.prototype.build = function () {
	const that = this;
	this.items = $('.appear-on-scroll');
	this.items.each(function (index, elem) {
		let offset = -window.innerHeight / 2.5;
		let delay = 0;


		if ($(elem).data('appear-on-scroll-offset')) {
			offset = offset + $(elem).data('offset');
		}

		if ($(elem).data('appear-on-scroll-delay')) {
			delay = $(elem).data('appear-on-scroll-delay');
		}

		that.scenes.push(scrollAnim(elem, elem, 1, offset, {
			delay: delay
		}).on('start', function () {
			setTimeout(function () {
				$(elem).addClass('appear');
			}, delay);
		}));
	});
};

AppearOnScroll.prototype.resize = function () {
	this.destroy();
	this.build();
};

AppearOnScroll.prototype.destroy = function () {
	if (this.scenes && this.scenes.length) {
		this.scenes.forEach(function (scene) {
			scene.destroy(true);
		});
		this.scenes = [];
	}
};


function DataLink() {
	this.build();
	barbaCallbacks.push(this);
}

DataLink.prototype.build = function(){
	this.items = $('[data-link]');
	this.items.on('click auxclick', function (e) {
		const target = $(this).attr('target');
		const link = document.createElement('a');
		link.href = $(this).data('link');
		if (e.ctrlKey || e.shiftKey || e.metaKey || e.which === 2 || (e.button && e.button === 1)) {
			link.target = '_blank';
		} else if (target) {
			link.target = target;
		}
		document.body.appendChild(link);
		link.click();
		link.remove();
	});
};

DataLink.prototype.destroy = function () {
	this.items.off('click auxclick');
};

function PageTransition() {
	foregroundContent.addClass('appear');

	const pageTransition = document.querySelector('.page-transition');
	const header = document.querySelector('header');
	const logo = document.querySelector('.page-transition .logo-container');
	const video = document.querySelector('.page-transition video');
	const anim = lottie.loadAnimation({
		container: logo,
		renderer: 'svg',
		loop: true,
		autoplay: true,
		path: '/wp-content/themes/mcube/animations/lori.json'
	});

	barba.init({
		timeout: 2000,
		transitions: [{
			leave(data) {
				const done = this.async();
				logo.style.display = 'none';
				video.style.display = 'block';
				video.play();
				pageTransition.classList.add('opacity-glitch-appear');
				pageTransition.classList.remove('disappear');
				setTimeout(done, 200);
				header.classList.remove('glitch-appear');
				header.classList.add('glitch-disappear');
			},
			enter({next}) {
				setTimeout(function () {
					pageTransition.classList.remove('opacity-glitch-appear');
					pageTransition.classList.add('disappear');
					header.classList.remove('glitch-disappear');
					header.classList.add('glitch-appear');
					setTimeout(function () {
						video.pause();
					}, 1000);
				}, 700);
			},
		}],
		// Admin bar
		prevent: ({el}) => el.classList && el.classList.contains('ab-item')
	});

	barba.hooks.after((data) => {
		// Traitements à effectuer au chargement d’une nouvelle page par barba
		$(document).off('load3DFinished');
		try {
			window.feather.destroy();
			window.feather.build();
		}
		catch (e) {
			console.error(e);
		}
		barbaCallbacks.forEach(function (callback) {
			try {
				if (typeof callback.destroy === 'function') {
					callback.destroy();
				}
				if (typeof callback.build === 'function') {
					callback.build();
				}
			} catch (e) {
				console.error(e);
			}
		});

	});

	barba.hooks.afterLeave((data) => {
		// Set <body> classes for "next" page
		const nextHtml = data.next.html;
		const response = nextHtml.replace(/(<\/?)body( .+?)?>/gi, '$1notbody$2>', nextHtml);
		const bodyClasses = $(response).filter('notbody').attr('class');
		$("body").attr("class", bodyClasses);
		const active = $(response).find('.current-menu-item');
		$('.current-menu-item').removeClass('current-menu-item');
		if (active && active.length) {
			for (const cssClass of active[0].classList) {
				if (cssClass.match(/^menu-item-\d+/)) {
					$('.' + cssClass).addClass('current-menu-item');
					break;
				}
			}
		}
	});

	// Run once
	$(document).on("load3DFinished", function (e) {
		document.querySelector('.page-transition .progress').classList.add('glitch-disappear');
		document.querySelector('.page-transition .progress-text-inner').classList.add('glitch-disappear');
		document.querySelector('.hud').classList.add('hud-appear');
		document.querySelector('.hud-right').classList.add('glitch-appear');
		document.querySelector('.page-transition').classList.add('disappear');
		document.querySelector('header').classList.add('glitch-appear');
		anim.destroy();
	});
}


function SmoothScroll() {
	this.build();
	barbaCallbacks.push(this);
}

SmoothScroll.prototype.build = function () {
	// if (scrollBar) {
	// 	scrollBar.update();
	// 	scrollBar.setPosition(0, 0);
	// } else {
	// 	window.scrollTo(0, 0);
	// }
	if (!mobileCheck.isMobile) {
		scrollController =
			new ScrollMagic.Controller(
				{
					refreshInterval: 0,
				}
			);
		scrollBar = Scrollbar.init(
			document.querySelector("#scrollContainer"), {
				damping: 0.15,
				continuousScrolling: false,
			}
		);

		scrollController.scrollPos(function () {
			return currentY;
		});

		scrollBar.addListener(function (status) {
			window.currentY = status.offset.y;
			scrollController.update(true);
			scrollListener(window.currentY);
		});

		const previousY = localStorage.getItem('currentScroll');
		if (devMode === 'true' && previousY) {
			setTimeout(function () {
				scrollBar.setPosition(0, previousY);
			}, 500);
		} else {
			setTimeout(function () {
				scrollBar.setPosition(0, 1);
				scrollBar.setPosition(0, 0);
				$(window).trigger('scrollBarRestoreDone');
			}, 200);
		}
	} else {
		scrollController = new ScrollMagic.Controller();
		window.scrollTo(0,1);
		window.scrollTo(0,0);
		window.onscroll = function() {
			window.currentY = window.scrollY;
			scrollListener(window.currentY);
		};
	}
};

SmoothScroll.prototype.destroy = function () {
	Scrollbar.destroyAll();
	scrollController.destroy(true);
};



function AutoType() {
	this.build();
	this.scenes = [];
	this.items = [];
	barbaCallbacks.push(this);
}

AutoType.prototype.build = function () {
	const that = this;
	$(document).on("load3DFinished", function (e) {
		that.internalBuild();
	});
};

AutoType.prototype.internalBuild = function () {
	const that = this;
	$('[data-autotype]').each(function (index, elem) {
		that.add(elem);
	});

	$('[data-autotype-appear]').each(function (index, elem) {
		that.addOnScroll(elem);
	});


	$('[data-autotype-hover]').each(function (index, elem) {
		that.prepare(elem);
		const parent = $(elem).closest(elem.dataset.autotypeSelector);
		that.items.push(parent);
		parent.on('mouseenter', function () {
			that.internalAdd(elem, elem.originalContent);
		}).on('mouseleave', function () {
			elem.innerHTML = '&nbsp;';
		});
	});
};


AutoType.prototype.prepare = function (elem) {
	if (!elem.originalContent) {
		elem.originalContent = elem.innerText;
	}
	elem.innerHTML = '&nbsp;';
};

AutoType.prototype.add = function (elem, delay) {
	const that = this;
	this.prepare(elem);
	delay = delay ? delay : elem.dataset.autotype;
	setTimeout(function () {
		that.internalAdd(elem, elem.originalContent);
	}, delay);
};

AutoType.prototype.addOnScroll = function (elem) {
	const that = this;
	const text = elem.innerText;
	elem.innerHTML = '&nbsp;';
	this.scenes.push(scrollAnim(elem, elem, 1, -window.innerHeight / 2)
		.reverse(false)
		.on('start', function () {
			that.internalAdd(elem, text);
		}));
};

AutoType.prototype.internalAdd = function (elem, text) {
	text = text.replace('&nbsp;', ' ');
	elem.classList.add('autotype-started');
	let i = 0;
	let consoleTyper = setInterval(function () {
		if (i !== text.length - 1) {
			i += 1;
			$(elem).text(text.substr(0, i));
		} else {
			$(elem).text(text);
			elem.classList.add('autotype-done');
			clearInterval(consoleTyper);
		}
	}, 50);
};

AutoType.prototype.destroy = function () {
	if (this.scenes && this.scenes.length) {
		this.scenes.forEach(function (scene) {
			scene.destroy(true);
		});
		this.scenes = [];
	}
	if(this.items && this.items.length){
		this.items.forEach(function (elem) {
			elem.off('mouseenter mouseleave');
		});
	}
};

function Buttons() {
	this.letters = 'azertyuiopqsdfghjklmwxcvbn,;:=ù`^^@&é"(§è!çà)-"<?.//+';
	this.intervals = [];
	this.build();
	barbaCallbacks.push(this);
}

Buttons.prototype.build = function () {
	const that = this;
	this.items = $('.btn-style-1');
	this.items.each(function (index, button) {
		const link = button.querySelector('a');
		const originalValue = link.innerHTML;
		link.currentLetter = 1;
		$(button).on('mouseenter', function () { // jshint ignore:line
			button.style.width = button.clientWidth + 1 + 'px';
			button.classList.add('hover');
			link.thisHasToStop = false;
			that.randomizeArrows(button, link, originalValue);
			setTimeout(function () {
				link.thisHasToStop = true;
			}, 500);
		}).on('mouseleave', function () {
			that.clear(button, link, originalValue);
		});
	});

	this.errors = $('.fake-error');
	let cnt = 0;
	this.errors.each(function (index, text) {
		const originalValue = text.innerHTML;
		text.currentLetter = 1;
		setTimeout(function () {
			const interval = setInterval(function () {
				text.thisHasToStop = false;
				that.randomizeArrows(text, text, originalValue);
				setTimeout(function () {
					text.thisHasToStop = true;
				}, 500);
			}, 2000);
			that.intervals.push(interval);
		}, cnt * 400);
		cnt++;
	});
};

Buttons.prototype.randomizeArrows = function (button, link, originalValue) {
	if (link.thisHasToStop) {
		let newValue = originalValue.substring(0, link.currentLetter);
		link.currentLetter++;
		if (link.currentLetter === originalValue.length) {
			this.clear(button, link, originalValue);
		} else {
			for (let i = link.currentLetter; i < originalValue.length; i++) {
				newValue += this.letters.charAt(Math.floor(Math.random() * this.letters.length));
			}
			link.innerHTML = newValue;
			this.buttonRandomTimeout = setTimeout(this.randomizeArrows.bind(this, button, link, originalValue), 40);
		}
	} else {
		let newValue = '';
		for (let i = 0; i < originalValue.length; i++) {
			newValue += this.letters.charAt(Math.floor(Math.random() * this.letters.length));
		}
		link.innerHTML = newValue;
		this.buttonRandomTimeout = setTimeout(this.randomizeArrows.bind(this, button, link, originalValue), 40);
	}
};

Buttons.prototype.clear = function (button, link, originalValue) {
	link.currentLetter = 0;
	link.thisHasToStop = false;
	button.classList.remove('hover');
	clearTimeout(this.buttonRandomTimeout);
	link.innerHTML = originalValue;
};

Buttons.prototype.destroy = function () {
	this.items.each(function (index, button) {
		$(button).off('mouseenter mouseleave');
	});
	this.intervals.forEach(function (interval) {
		clearInterval(interval);
	});
};

function Contact() {
	this.hud = $('.hud');
	this.openPopup = $('.contact-toggle');
	this.contactPopup = $('.contact-popup');
	this.closePopup = $('.close-popup');
	this.glitch = $('.contact-popup .glitch-background');

	const logo = this.contactPopup[0].querySelector('.logo-container');
	this.anim = lottie.loadAnimation({
		container: logo,
		renderer: 'svg',
		loop: true,
		autoplay: false,
		path: '/wp-content/themes/mcube/animations/lori.json'
	});

	const that = this;
	this.openPopup.on('click', function (e) {
		e.preventDefault();
		that.contactPopup.addClass('appear');
		that.anim.play();
		that.enableGlitch();
		return false;
	});
	this.closePopup.on('click', function (e) {
		e.preventDefault();
		that.close();
	});

	this.build();
	barbaCallbacks.push(this);
}

Contact.prototype.close = function () {
	const that = this;
	this.foregroundContent.off('click.contact');
	this.foregroundContent.removeClass('cursor-pointer');
	that.contactPopup.removeClass('appear');
	that.contactPopup.addClass('disappear');
	setTimeout(function () {
		that.anim.pause();
		that.contactPopup.removeClass('disappear');
		that.disableGlitch();
	}, 500);
};

Contact.prototype.enableGlitch = function () {
	const that = this;
	that.glitch.addClass('glitch--style-7');
	setTimeout(function () {
		that.glitch.removeClass('glitch--style-7');
	}, 1500);
	that.glitchInterval = setInterval(function () {
		that.glitch.addClass('glitch--style-7');
		setTimeout(function () {
			that.glitch.removeClass('glitch--style-7');
		}, 1500);
	}, 10000);
	const foregroundContent = $('.foreground-content');
	foregroundContent.addClass('cursor-pointer');
	foregroundContent.on('click.contact', function () {
		that.close();
	});
};

Contact.prototype.disableGlitch = function () {
	clearInterval(this.glitchInterval);
};

Contact.prototype.build = function () {
	this.foregroundContent = $('.foreground-content');
	this.contactButton = $('.contact-button');
	if (this.contactButton && this.contactButton.length) {
		const that = this;
		this.contactButton.on('click', function (e) {
			e.preventDefault();
			that.enableGlitch();
			that.anim.play();
			that.contactPopup.addClass('appear');
			return false;
		});
	}
};

Contact.prototype.destroy = function () {
	if (this.contactButton && this.contactButton.length) {
		this.contactButton.off('click');
	}
	this.foregroundContent.off('click.contact');
	this.foregroundContent.removeClass('cursor-pointer');
	this.anim.pause();
};

function HeaderVideo() {
	this.scenes = [];
	this.build();
	barbaCallbacks.push(this);
	resizeCallbacks.push(this);
}

HeaderVideo.prototype.build = function () {
	this.internalBuild();

	$(document).on('load3DFinished', function () {
		const video = document.querySelector('.video-container');
		if (video) {
			video.classList.add('appear');
			video.querySelector('video').play();
		}
	});
};

HeaderVideo.prototype.internalBuild = function () {
	const that = this;
	this.vid = document.querySelector('.video-container video');
	if (this.vid) {
		if (!mobileCheck.isMobile) {
			this.scenes.push(scrollAnim('.video-container', '.video-container', window.innerHeight, window.innerHeight / 2, {
				y: -window.innerHeight,
				ease: Linear.easeNone
			}).on('end', function (e) {
				if (e.scrollDirection === 'FORWARD') {
					that.vid.pause();
				} else {
					that.vid.play();
				}
			}));
		}
	}
};

HeaderVideo.prototype.resize = function () {
	this.destroy();
	this.internalBuild();
};

HeaderVideo.prototype.destroy = function () {
	if (this.scenes && this.scenes.length) {
		this.scenes.forEach(function (scene) {
			scene.destroy(true);
		});
		this.scenes = [];
	}
};

function HomeProjects() {
	this.build();
	barbaCallbacks.push(this);
	resizeCallbacks.push(this);
}

HomeProjects.prototype.build = function () {
	const that = this;
	this.projects = $(".home-projects .project");
	this.projects.each(function (index, project) {
		project = $(project);
		const currentImg = $(this).find('.glitch-image');
		const offsetX = currentImg.width() / 2;
		const offsetY = currentImg.height() / 2;
		project.firstMove = true;
		project.on('mouseenter', function () {
			currentImg.fadeTo(100, 0.3);
			project.firstMove = true;
			project.addClass('active');
			that.clonePicture(currentImg);
		}).on('mousemove', function (e) {
			var parentOffset = $(this).offset();
			var relX = e.pageX - parentOffset.left;
			var relY = e.pageY - parentOffset.top;
			if (project.firstMove === true) {
				project.firstMove = false;
				currentImg.css('left', relX - offsetX);
				currentImg.css('top', relY - offsetY);
			} else {
				TweenMax.to(currentImg, 0.3, {
					left: relX - offsetX,
					top: relY - offsetY
				});
			}
		}).on('mouseleave', function () {
			currentImg.fadeOut(100);
			project.removeClass('active');
			that.killClones(currentImg);
		});
	});
};


HomeProjects.prototype.clonePicture = function (elem) {
	const template = elem.find('.glitch__img');
	for(let i = 0; i < 4; i++){
		const clone = template.clone();
		clone.addClass('clone');
		elem.append(clone);
	}
};

HomeProjects.prototype.killClones = function (elem) {
	const clones = elem.find('.glitch__img.clone');
	clones.remove();
};

HomeProjects.prototype.resize = function () {
	this.destroy();
	this.build();
};

HomeProjects.prototype.destroy = function () {
	this.projects.each(function (index, project) {
		project = $(project);
		project.off('mouseenter mousemove mouseleave');
	});
};

function HUD() {
	this.hudElement = $(".hud");
	this.scenes = [];
	resizeCallbacks.push(this);
	barbaCallbacks.push(this);
	this.initialBuild();
	this.build();
	this.disappearElements = $('header, .hud-right');
}

HUD.prototype.initialBuild = function () {
	if (!mobileCheck.isMobile) {
		const that = this;
		$(document).on('mousemove.hud', function (event) {
			const xPos = (event.clientX / $(window).width()) - 0.5,
				yPos = (event.clientY / $(window).height()) - 0.5;

			TweenLite.to(that.hudElement, 1, {
				x: -xPos * 20,
				y: -yPos * 20,
				rotationY: yPos * 2,
				rotationX: xPos * 2,
				transformStyle: "preserve3d",
				ease: Linear.easeNone,
			});
		});
	}
};

HUD.prototype.build = function () {
	const footer = document.querySelector('footer');
	if(footer){
		const duration = footer.clientHeight + 100;
		this.scenes.push(scrollAnim(this.hudElement.find('.hud-bottom'), document.querySelector('.footer-top'), duration, -window.innerHeight / 2, {
			y: -duration,
			ease: Linear.easeNone
		}));
	}
};

HUD.prototype.destroy = function () {
	if (this.scenes && this.scenes.length) {
		this.scenes.forEach(function (scene) {
			scene.destroy(true);
		});
		this.scenes = [];
	}
};

HUD.prototype.resize = function () {
	$(document).off('mousemove.hud');
	this.destroy();
	this.initialBuild();
	this.build();
};

HUD.prototype.onScroll = function (currentY) {
	if (currentY > 50 && !this.dissapear) {
		this.disappearElements.removeClass('glitch-appear').addClass('glitch-disappear');
		this.dissapear = true;
	} else if (currentY < 50 && this.dissapear) {
		this.disappearElements.removeClass('glitch-disappear').addClass('glitch-appear');
		this.dissapear = false;
	}
};

function ImageParallax() {
	this.scenes = [];
	this.build();
	barbaCallbacks.push(this);
	resizeCallbacks.push(this);
}

ImageParallax.prototype.build = function () {
	if (!mobileCheck.isMobile) {
		const that = this;
		document.querySelectorAll('.image-parallax').forEach(function (element) {
			that.scenes.push(scrollAnim(element, element, window.innerHeight + element.clientHeight, -window.innerHeight / 2, {
				y: '-10%',
				ease: Linear.easeNone
			}));
		});
	}
};

ImageParallax.prototype.destroy = function () {
	if (this.scenes && this.scenes.length) {
		this.scenes.forEach(function (scene) {
			scene.destroy(true);
		});
		this.scenes = [];
	}
};

ImageParallax.prototype.resize = function () {
	this.destroy();
	this.build();
};

function IntroParallax() {
	this.scenes = [];
	this.timelines = [];
	this.build();
	barbaCallbacks.push(this);
}

IntroParallax.prototype.build = function () {
	if (!mobileCheck.isMobile) {
		const introRow = '.section-intro-parallax .row';
		const yParallax = window.innerWidth > 767 ? window.innerHeight / 3 : window.innerHeight / 2.5;
		this.scenes.push(scrollAnim(introRow, '.content-wrapper', window.innerHeight, window.innerHeight / 2, {
			y: yParallax,
			opacity: 0,
			ease: Linear.easeNone
		}));
	}
	const titles = document.querySelectorAll('.title-lvl1 span');
	let lineNumber = 1;
	const that = this;
	for (const title of titles) {
		const timeline = new TimelineMax();
		timeline.pause();
		const mySplitText = new SplitText(title, {
			type: "chars,words,lines",
			linesClass: 'split-line'
		});
		const chars = mySplitText.chars;
		timeline.staggerFrom(chars, 1.2, {
			y: '135%',
			skewY: '-20deg',
			stagger: -0.03,
			delay: 0.2 + lineNumber * 0.2,
			ease: Power4.easeOut
		});
		lineNumber++;
		this.timelines.push(timeline);
	}

	$(document).on('load3DFinished', function (e) {
		for (const timeline of that.timelines) {
			timeline.play();
		}
	});
};


IntroParallax.prototype.destroy = function () {
	if (this.scenes && this.scenes.length) {
		this.scenes.forEach(function (scene) {
			if (scene) {
				scene.destroy(true);
			}
		});
		this.scenes = [];
	}
	if (this.timelines && this.timelines.length) {
		this.timelines.forEach(function (timeline) {
			timeline.clear();
		});
	}
};

function Start3dOnScroll() {
	this.scenes = [];
	this.build();
	barbaCallbacks.push(this);
}

Start3dOnScroll.prototype.build = function () {
	const that = this;
	$(document).on('load3DFinished', function () {
		const canvas = document.querySelector('.feather-container canvas');
		const offset = body.hasClass('error404') ? 1 : window.innerHeight;
		const scene = scrollAnim(canvas, '.section-intro', 1, offset, {});
		scene.reverse(false);
		scene.on('end', function () {
			window.feather.startRender();
			TweenMax.to(window.feather.model.position, 4, {
				y: -18.3,
				ease: Power1.easeOut,
				onComplete: function () {
					setTimeout(function () {
						window.feather.animStarted = true;
					}, 300);
				}
			});
			scene.destroy(true);
			setTimeout(function () {
			}, 3000);
		});
		that.scenes.push(scene);
	});
};

Start3dOnScroll.prototype.destroy = function () {
	if (this.scenes && this.scenes.length) {
		this.scenes.forEach(function (scene) {
			scene.destroy(true);
		});
		this.scenes = [];
	}
};

function StickyCursor() {
	this.cursor = document.querySelector('.sticky-cursor');
	if (!mobileCheck.isMobile) {
		this.cursor.style.display = 'block';
		$(window).on('mousemove', this.move.bind(this));
		const that = this;
		requestAnimationFrame(function (now) {
			that.render();
		});
		this.build();
	}
	barbaCallbacks.push(this);
}

StickyCursor.prototype.build = function () {
	const that = this;
	this.items = $('a, [data-link]');
	this.items.on('mouseenter', function () {
		that.cursor.classList.add('hover');
	}).on('mouseleave', function () {
		that.cursor.classList.remove('hover');
	});
};

StickyCursor.prototype.destroy = function () {
	if (this.items && this.items.length) {
		this.items.off('mouseenter mouseleave');
		this.cursor.classList.remove('hover');
	}
};

StickyCursor.prototype.move = function (e) {
	this.x = e.clientX;
	this.y = e.clientY;
};

StickyCursor.prototype.render = function () {
	const that = this;
	this.cursor.style.transform = 'matrix(1, 0, 0, 1, ' + this.x + ', ' + this.y + ')';
	requestAnimationFrame(function () {
		that.render();
	});
};

function TextAppear() {
	this.scenes = [];
	this.timelines = [];
	this.splitTexts = [];
	this.build();
	barbaCallbacks.push(this);
	resizeCallbacks.push(this);
}

TextAppear.prototype.build = function () {
	const titles = document.querySelectorAll('.text-appear');
	let lineNumber = 1;
	const that = this;
	for (const title of titles) {
		const scene = new ScrollMagic.Scene(
			{
				triggerElement: title,
				duration: 1,
				offset: -window.innerHeight / 2,
				reverse: false
			}
		)
			.addTo(scrollController);
		scene.on('enter', function () { // jshint ignore:line
				const timeline = new TimelineMax();
				const splitText = new SplitText(title, {
					type: "chars,words,lines",
					linesClass: 'split-line'
				});
				that.splitTexts.push(splitText);
				const chars = splitText.chars;
				timeline.staggerFrom(chars, 0.8, {
					y: '135%',
					skewY: '-20deg',
					stagger: 0.03,
					delay: 0.2,
					ease: Power4.easeOut
				});
				lineNumber++;
				that.timelines.push(timeline);
			});
		that.scenes.push(scene);
	}
};

TextAppear.prototype.resize = function(){
	this.destroy();
	this.build();
};

TextAppear.prototype.destroy = function () {
	if (this.scenes && this.scenes.length) {
		this.scenes.forEach(function (scene) {
			scene.destroy(true);
		});
		this.scenes = [];
	}
	if (this.timelines && this.timelines.length) {
		this.timelines.forEach(function (timeline) {
			timeline.clear();
		});
	}
	if(this.splitTexts && this.splitTexts.length){
		this.splitTexts.forEach(function (splitText) {
			splitText.revert();
		});
	}
};

function Collaborators() {
	this.build();
	barbaCallbacks.push(this);
}

Collaborators.prototype.build = function () {
	this.cards = $(".post-type-archive-collaborators .collaborator");
	const that = this;
	this.cards.each(function (index, card) {
		var target = Math.floor(Math.random() * that.cards.length - 1) + 1;
		var target2 = Math.floor(Math.random() * that.cards.length - 1) + 1;
		that.cards.eq(target).before(that.cards.eq(target2));
	});
	document.dispatchEvent(new CustomEvent("reorderCollaboratorsFinished"));

	this.items = $('.collaborator');
	this.items.on('mouseenter', function () {
		that.clonePicture($(this).find('.glitch-image'));
	}).on('mouseleave', function () {
		that.killClones($(this).find('.glitch-image'));
	});
};

Collaborators.prototype.clonePicture = function (elem) {
	const template = elem.find('.glitch__img');
	for(let i = 0; i < 4; i++){
		const clone = template.clone();
		clone.addClass('clone');
		elem.append(clone);
	}
};

Collaborators.prototype.killClones = function (elem) {
	const clones = elem.find('.glitch__img.clone');
	clones.remove();
};

Collaborators.prototype.destroy = function () {

	if(this.items && this.items.length){
		this.items.off('mouseenter mouseleave');
	}
};

function ProjectPage() {
	this.build();
	barbaCallbacks.push(this);
}

ProjectPage.prototype.build = function () {
	const videos = document.querySelectorAll('.realizations video');
	videos.forEach(function (elem) {
		elem.play();
	});
};

function ProjectsPage() {
	this.build();
	barbaCallbacks.push(this);
	resizeCallbacks.push(this);
}

ProjectsPage.prototype.build = function () {
	if (document.querySelector('.projects-container')) {
		this.firstCol = document.querySelector('.section-projects .first-col');
		this.resize();

		const that = this;
		this.items = $('.project');
		this.items.on('mouseenter', function () {
			that.clonePicture($(this).find('.glitch-image'));
		}).on('mouseleave', function () {
			that.killClones($(this).find('.glitch-image'));
		});
	}
};

ProjectsPage.prototype.clonePicture = function (elem) {
	const template = elem.find('.glitch__img');
	for (let i = 0; i < 4; i++) {
		const clone = template.clone();
		clone.addClass('clone');
		elem.append(clone);
	}
};

ProjectsPage.prototype.killClones = function (elem) {
	const clones = elem.find('.glitch__img.clone');
	clones.remove();
};

ProjectsPage.prototype.resize = function () {
	if (this.firstCol) {
		if (window.innerWidth > 767) {
			const image = document.querySelector('.section-projects .second-col .project:first-child');
			if (image) {
				const height = image.clientHeight - image.clientWidth;
				this.firstCol.style.marginTop = height + 'px';
			}
		} else {
			this.firstCol.style.marginTop = '0px';
		}
	}
};

ProjectsPage.prototype.destroy = function () {
	if(this.items && this.items.length){
		this.items.off('mouseenter mouseleave');
	}
};

window.onbeforeunload = function (event) {
	localStorage.setItem('currentScroll', window.currentY ? window.currentY : 0);
};

function ResizeEvents() {

	var timer,
		orientationchanged = true,
		newOrientation,
		$window = $(window),
		oldOrientation = $window.width() > $window.height() ? 'landscape' : 'portrait';

	$window.resize(function () {
		if (timer) {
			clearTimeout(timer);
		}

		timer = setTimeout(function () {
			if (mobileCheck.isMobile) {
				newOrientation = $window.width() > $window.height() ? 'landscape' : 'portrait';
				orientationchanged = newOrientation !== oldOrientation;
				oldOrientation = newOrientation;
				if(!orientationchanged){
					$window.trigger('mobileResize');
				}
			}

			if (orientationchanged) {
				$window.trigger('customResize');
			}
		}, 100);
	});

	$window.on('customResize', function () {

		if (!mobileCheck.isMobile) {
			scrollBar.scrollTo(0, 0);
		}

		resizeCallbacks.forEach(function (callback) {
			callback.resize();
		});
		// spé mcube.fr
		window.feather.resize();

		if (!mobileCheck.isMobile) {
			setTimeout(function () {
				scrollBar.scrollTo(0, window.currentY);
			}, 400);
		}
	});

	$window.on('mobileResize', function () {
		mobileResizeCallbacks.forEach(function (callback) {
			callback.resize();
		});
		// spé mcube.fr
		window.feather.resize();
	});
}

function consoleLog($message, $bg, $color) {
	console.log('%c' + $message, 'background-color:' + $bg + '; color:' + $color + ';padding:3px 5px;');
}

function MadeByMcube() {
	consoleLog('Fabriqué à Lyon par Mcube', '#FA3348', '#ffffff');
	consoleLog('www.mcube.fr');
}

function mcubeDebug() {
	devMode = localStorage.getItem('devMode');
	if(devMode === 'true'){
		document.body.classList.add('debug-mode');
		debug3D();
	}
}

function debug3D(){
	window.addEventListener('keydown', (e) => {
		if (e.key === 'd') {
			$('#debug3D').show();
		}
		switch (e.key) {
			case 'd':
				$('#debug3D').show();
				break;
			case 'Escape':
				$('#debug3D').hide();
				break;
			case 'ArrowLeft':
				window.feather.model.position.x-=10;updateData();
				break;
			case 'ArrowRight':
				window.feather.model.position.x+=10;updateData();
				break;
			case 'ArrowUp':
				window.feather.model.position.y+=10;updateData();
				break;
			case 'ArrowDown':
				window.feather.model.position.y-=10;updateData();
				break;
		}
	});
}


function isMobileOrTablet() {
	const userAgent = this.getUserAgent();
	const userAgentPart = userAgent.substr(0, 4);
	let mobile = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(userAgent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(userAgentPart);
	if(!mobile && userAgent.indexOf('Macintosh') > -1){
		if('ontouchend' in document){
			return true;
		}
	}
	return mobile;
}

function getUserAgent() {
	const userAgent = navigator.userAgent || navigator.vendor || window.opera || null;
	if (!userAgent)
		throw new Error('Failed to look for user agent information.');
	return userAgent;
}

function MobileCheck() {
	this.isMobile = false;
	if (isMobileOrTablet()) {
		this.isMobile = true;
		body.addClass("mcube-mobile");
	} else {
		body.addClass("mcube-desktop");
	}
}

function scrollAnim(targetElement, triggerElement, duration, offset, params) {
	if (typeof targetElement === 'string') {
		targetElement = $(targetElement)[0];
	}
	if (typeof triggerElement === 'string') {
		triggerElement = $(triggerElement)[0];
	}
	if (targetElement && triggerElement) {

		const scene = new ScrollMagic.Scene(
			{
				triggerElement: triggerElement,
				duration: duration,
				offset: offset
			}
		)
			.setTween(TweenMax.to(targetElement, 1, params))
			.addTo(scrollController);
		return scene;
	}
}

//# sourceMappingURL=scripts.min.js.map
